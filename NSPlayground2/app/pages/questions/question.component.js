"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var router_1 = require("nativescript-angular/router");
var page_1 = require("ui/page");
var animation_1 = require("ui/animation");
var platform_1 = require("platform");
var app = require("application");
var question_slides_service_1 = require("./question-slides.service");
var router_2 = require("@angular/router");
var config_1 = require("../../parameters/config");
var radio_option_1 = require("../../services/radio-option");
var application_settings_1 = require("tns-core-modules/application-settings/application-settings");
var QuestionComponent = /** @class */ (function () {
    function QuestionComponent(page, nav, activatedRoute, questionService) {
        this.page = page;
        this.nav = nav;
        this.activatedRoute = activatedRoute;
        this.questionService = questionService;
        this.pathImage = config_1.Config;
        this.radioOptions = [];
        this.showSlideQuestion = false;
        this.isFrAr = config_1.Config.IsArFr;
        this.currentSlideNum = 0;
        this.screenWidth = platform_1.screen.mainScreen.widthDIPs;
        // Span the background under status bar on Android
        if (platform_1.isAndroid && platform_1.device.sdkVersion >= '21') {
            var View = android.view.View;
            var window = app.android.startActivity.getWindow();
            window.setStatusBarColor(0x000000);
            var decorView = window.getDecorView();
            decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE
                | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
                | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
                | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);
        }
    }
    QuestionComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.dictionayjson = require(config_1.Config.dictionaryUrl);
        this.id_test = this.activatedRoute.snapshot.paramMap.get('id_test');
        this.timeQCM = application_settings_1.getString("test_duree_pre");
        this.timeSecond = 60;
        var gridMain = this.gridMain.nativeElement;
        gridMain.height = 0;
        this.questionService.getListQuestions(this.id_test).subscribe(function (data) {
            _this.listeQuestion = data;
            _this.slideCount = _this.listeQuestion.length;
            //---------RadioButton-----------//
            _this.listeQuestion.forEach(function (item) {
                if (_this.getTypeQuestion(item).type == 'r') {
                    _this.radioOptions
                        .push(new radio_option_1.RadioOption(item.id, item.rep1, false));
                    _this.radioOptions
                        .push(new radio_option_1.RadioOption(item.id, item.rep2, false));
                    _this.radioOptions
                        .push(new radio_option_1.RadioOption(item.id, item.rep3, false));
                    _this.radioOptions
                        .push(new radio_option_1.RadioOption(item.id, item.rep4, false));
                    _this.radioOptions
                        .push(new radio_option_1.RadioOption(item.id, item.rep5, false));
                    _this.radioOptions
                        .push(new radio_option_1.RadioOption(item.id, item.rep6, false));
                }
            });
            //------------------//
            _this.slideView = _this.slideElement.nativeElement;
            var gridViewC = _this.gridViewC.nativeElement;
            _this.slideView.content = (_this.slidesView = gridViewC);
            setTimeout(function () {
                for (var i = 1; i < _this.slideCount; i++) {
                    _this.slidesView.getChildAt(i).opacity = 0;
                }
                _this.listeQuestion.forEach(function (item) {
                    var ii = 0;
                    _this.onSwipe(2, 10);
                    console.log(ii++);
                }, 50);
                console.log(_this.currentSlideNum);
            });
        }, function (error) {
            console.log("error question");
        });
        //---------------------------//
        this.page.actionBarHidden = true;
        this.page.cssClasses.add("welcome-page-background");
        this.page.backgroundSpanUnderStatusBar = true;
    };
    //-------------------------------//
    QuestionComponent.prototype.onProgressBarLoaded = function (args) {
        var myProgressBar = args.object;
        myProgressBar.value = 10;
        myProgressBar.maxValue = 200;
        setInterval(function () {
            myProgressBar.value += 4;
        }, 100);
    };
    QuestionComponent.prototype.onValueChanged = function (args) {
        var _this = this;
        var myProgressBar = args.object;
        console.log("Old Value: " + args.oldValue);
        console.log("New Value: " + args.value);
        if (args.value == 200) {
            this.showSlideQuestion = true;
            var gridMain = this.gridMain.nativeElement;
            gridMain.height = 10000;
            //------------time circulation --------//
            var timeM = setInterval(function () {
                _this.timeQCM -= 1;
                _this.timeSecond = 60;
                if (_this.timeQCM == 0) {
                    clearInterval(timeM);
                }
            }, 60000);
            var timeS = setInterval(function () {
                _this.timeSecond -= 1;
                if (_this.timeQCM == 0)
                    clearInterval(timeS);
            }, 1000);
        }
    };
    //-------------------------------//
    QuestionComponent.prototype.onSwipe = function (direction, duree) {
        var prevSlideNum = this.currentSlideNum;
        var count = this.slideCount;
        if (direction == 2) {
            this.currentSlideNum = (this.currentSlideNum + 1) % count;
        }
        else if (direction == 1) {
            this.currentSlideNum = (this.currentSlideNum - 1 + count) % count;
        }
        else {
            // We are interested in left and right directions
            return;
        }
        var currSlide = this.slidesView.getChildAt(prevSlideNum);
        var nextSlide = this.slidesView.getChildAt(this.currentSlideNum);
        console.log(this.currentSlideNum);
        this.animate(currSlide, nextSlide, direction, duree);
    };
    QuestionComponent.prototype.animate = function (currSlide, nextSlide, direction, duree) {
        nextSlide.translateX = (direction == 2 ? this.screenWidth : -this.screenWidth);
        nextSlide.opacity = 1;
        var definitions = new Array();
        var defn1 = {
            target: currSlide,
            translate: { x: (direction == 2 ? -this.screenWidth : this.screenWidth), y: 0 },
            duration: duree
        };
        definitions.push(defn1);
        var defn2 = {
            target: nextSlide,
            translate: { x: 0, y: 0 },
            duration: duree
        };
        definitions.push(defn2);
        var animationSet = new animation_1.Animation(definitions);
        animationSet.play()
            .then(function () {
            console.log("Animation finished");
        })
            .catch(function (e) {
            console.log(e.message);
        });
    };
    QuestionComponent.prototype.getSliderItemClass = function (item) {
        if (item == this.currentSlideNum)
            return "caro-item-dot-selected";
        return "caro-item-dot";
    };
    QuestionComponent.prototype.getTypeQuestion = function (quest) {
        var nbR = 0;
        var nbJ = 0;
        if (quest.rep1 != null)
            nbR += 1;
        if (quest.rep2 != null)
            nbR += 1;
        if (quest.rep3 != null)
            nbR += 1;
        if (quest.rep4 != null)
            nbR += 1;
        if (quest.rep5 != null)
            nbR += 1;
        if (quest.rep6 != null)
            nbR += 1;
        if (quest.just1 != "0")
            nbJ += 1;
        if (quest.just2 != "0")
            nbJ += 1;
        if (quest.just3 != "0")
            nbJ += 1;
        if (quest.just4 != "0")
            nbJ += 1;
        if (quest.just5 != "0")
            nbJ += 1;
        if (quest.just6 != "0")
            nbJ += 1;
        if (nbR == 1 && nbJ == 1)
            return { type: "t", nPro: nbR };
        else if (nbR > 1 && nbJ == 1)
            return { type: "r", nPro: nbR };
        return { type: "c", nPro: nbR };
    };
    //------Radio Button--------/
    QuestionComponent.prototype.changeCheckedRadio = function (idQ, txtR) {
        console.log(idQ + "  " + txtR);
        for (var i = 0; i < this.radioOptions.length; i++)
            if (this.radioOptions[i].idQue == idQ && this.radioOptions[i].txtRep == txtR)
                this.radioOptions[i].selected = true;
            else if (this.radioOptions[i].idQue == idQ && this.radioOptions[i].txtRep != txtR)
                this.radioOptions[i].selected = false;
        console.log(this.radioOptions);
    };
    QuestionComponent.prototype.elatRadio = function (idQ, txtR) {
        for (var i = 0; i < this.radioOptions.length; i++)
            if (this.radioOptions[i].idQue == idQ && this.radioOptions[i].txtRep == txtR)
                return this.radioOptions[i].selected || false;
        return false;
    };
    QuestionComponent.prototype.onCheckBoxTap = function () {
        console.log("aaaaaa");
    };
    __decorate([
        core_1.ViewChild('slideContent'),
        __metadata("design:type", core_1.ElementRef)
    ], QuestionComponent.prototype, "slideElement", void 0);
    __decorate([
        core_1.ViewChild('gridViewC'),
        __metadata("design:type", core_1.ElementRef)
    ], QuestionComponent.prototype, "gridViewC", void 0);
    __decorate([
        core_1.ViewChild('gridMain'),
        __metadata("design:type", core_1.ElementRef)
    ], QuestionComponent.prototype, "gridMain", void 0);
    QuestionComponent = __decorate([
        core_1.Component({
            selector: "question",
            moduleId: module.id,
            templateUrl: "./question.component.html",
            styleUrls: ["./question.component.css"]
        }),
        __metadata("design:paramtypes", [page_1.Page,
            router_1.RouterExtensions,
            router_2.ActivatedRoute,
            question_slides_service_1.QuestionSlidesService])
    ], QuestionComponent);
    return QuestionComponent;
}());
exports.QuestionComponent = QuestionComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlc3Rpb24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicXVlc3Rpb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQWdGO0FBQ2hGLHNEQUErRDtBQUUvRCxnQ0FBa0Q7QUFHbEQsMENBQThEO0FBQzlELHFDQUFxRDtBQUdyRCxpQ0FBbUM7QUFJbkMscUVBQWtFO0FBQ2xFLDBDQUFpRDtBQUdqRCxrREFBaUQ7QUFHakQsNERBQTBEO0FBRzFELG1HQUF1RjtBQVV2RjtJQXdCSSwyQkFDWSxJQUFVLEVBQ1YsR0FBcUIsRUFDckIsY0FBOEIsRUFDOUIsZUFBc0M7UUFIdEMsU0FBSSxHQUFKLElBQUksQ0FBTTtRQUNWLFFBQUcsR0FBSCxHQUFHLENBQWtCO1FBQ3JCLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtRQUM5QixvQkFBZSxHQUFmLGVBQWUsQ0FBdUI7UUF6QmxELGNBQVMsR0FBRyxlQUFNLENBQUM7UUFHbkIsaUJBQVksR0FBRyxFQUFFLENBQUM7UUFDbEIsc0JBQWlCLEdBQUcsS0FBSyxDQUFDO1FBQzFCLFdBQU0sR0FBRyxlQUFNLENBQUMsTUFBTSxDQUFDO1FBS2hCLG9CQUFlLEdBQVcsQ0FBQyxDQUFDO1FBaUIvQixJQUFJLENBQUMsV0FBVyxHQUFHLGlCQUFNLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQztRQUUvQyxrREFBa0Q7UUFDbEQsSUFBSSxvQkFBUyxJQUFJLGlCQUFNLENBQUMsVUFBVSxJQUFJLElBQUksRUFBRTtZQUN4QyxJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztZQUM3QixJQUFJLE1BQU0sR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUNuRCxNQUFNLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLENBQUM7WUFFbkMsSUFBSSxTQUFTLEdBQUcsTUFBTSxDQUFDLFlBQVksRUFBRSxD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RyxJQUFJLENBQUMsQ0FBQTtRQUNoQyxJQUFJLEtBQUssQ0FBQyxJQUFJLElBQUksSUFBSTtZQUFFLEdBQUcsSUFBSSxDQUFDLENBQUE7UUFDaEMsSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUk7WUFBRSxHQUFHLElBQUksQ0FBQyxDQUFBO1FBQ2hDLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJO1lBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQTtRQUNoQyxJQUFJLEtBQUssQ0FBQyxJQUFJLElBQUksSUFBSTtZQUFFLEdBQUcsSUFBSSxDQUFDLENBQUE7UUFFaEMsSUFBSSxLQUFLLENBQUMsS0FBSyxJQUFJLEdBQUc7WUFBRSxHQUFHLElBQUksQ0FBQyxDQUFBO1FBQ2hDLElBQUksS0FBSyxDQUFDLEtBQUssSUFBSSxHQUFHO1lBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQTtRQUNoQyxJQUFJLEtBQUssQ0FBQyxLQUFLLElBQUksR0FBRztZQUFFLEdBQUcsSUFBSSxDQUFDLENBQUE7UUFDaEMsSUFBSSxLQUFLLENBQUMsS0FBSyxJQUFJLEdBQUc7WUFBRSxHQUFHLElBQUksQ0FBQyxDQUFBO1FBQ2hDLElBQUksS0FBSyxDQUFDLEtBQUssSUFBSSxHQUFHO1lBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQTtRQUNoQyxJQUFJLEtBQUssQ0FBQyxLQUFLLElBQUksR0FBRztZQUFFLEdBQUcsSUFBSSxDQUFDLENBQUE7UUFDaEMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1lBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFBO2FBQ3BELElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztZQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQTtRQUM3RCxPQUFPLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUE7SUFDbkMsQ0FBQztJQUNELDZCQUE2QjtJQUM3Qiw4Q0FBa0IsR0FBbEIsVUFBbUIsR0FBRyxFQUFFLElBQUk7UUFDeEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFBO1FBRTlCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUU7WUFDN0MsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUksSUFBSTtnQkFDeEUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO2lCQUNwQyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sSUFBSSxJQUFJO2dCQUM3RSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7UUFFOUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUE7SUFDbEMsQ0FBQztJQUNELHFDQUFTLEdBQVQsVUFBVSxHQUFHLEVBQUUsSUFBSTtRQUNmLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUU7WUFDN0MsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUksSUFBSTtnQkFDeEUsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsSUFBSSxLQUFLLENBQUM7UUFDdEQsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQztJQUVELHlDQUFhLEdBQWI7UUFDSSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQ3pCLENBQUM7SUFyTzBCO1FBQTFCLGdCQUFTLENBQUMsY0FBYyxDQUFDO2tDQUFlLGlCQUFVOzJEQUFDO0lBQzVCO1FBQXZCLGdCQUFTLENBQUMsV0FBVyxDQUFDO2tDQUFZLGlCQUFVO3dEQUFDO0lBQ3ZCO1FBQXRCLGdCQUFTLENBQUMsVUFBVSxDQUFDO2tDQUFXLGlCQUFVO3VEQUFDO0lBckJuQyxpQkFBaUI7UUFON0IsZ0JBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxVQUFVO1lBQ3BCLFFBQVEsRUFBRSxNQUFNLENBQUMsRUFBRTtZQUNuQixXQUFXLEVBQUUsMkJBQTJCO1lBQ3hDLFNBQVMsRUFBRSxDQUFDLDBCQUEwQixDQUFDO1NBQzFDLENBQUM7eUNBMEJvQixXQUFJO1lBQ0wseUJBQWdCO1lBQ0wsdUJBQWM7WUFDYiwrQ0FBcUI7T0E1QnpDLGlCQUFpQixDQXlQN0I7SUFBRCx3QkFBQztDQUFBLEFBelBELElBeVBDO0FBelBZLDhDQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBWaWV3Q2hpbGQsIEVsZW1lbnRSZWYsIElucHV0IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgUm91dGVyRXh0ZW5zaW9ucyB9IGZyb20gXCJuYXRpdmVzY3JpcHQtYW5ndWxhci9yb3V0ZXJcIjtcclxuXHJcbmltcG9ydCB7IFBhZ2UsIENvbnRlbnRWaWV3LCBWaWV3IH0gZnJvbSBcInVpL3BhZ2VcIjtcclxuaW1wb3J0IHsgU3dpcGVHZXN0dXJlRXZlbnREYXRhIH0gZnJvbSBcInVpL2dlc3R1cmVzL2dlc3R1cmVzXCI7XHJcbmltcG9ydCB7IEdyaWRMYXlvdXQsIEdyaWRVbml0VHlwZSwgSXRlbVNwZWMgfSBmcm9tIFwidWkvbGF5b3V0cy9ncmlkLWxheW91dFwiO1xyXG5pbXBvcnQgeyBBbmltYXRpb25EZWZpbml0aW9uLCBBbmltYXRpb24gfSBmcm9tICd1aS9hbmltYXRpb24nO1xyXG5pbXBvcnQgeyBzY3JlZW4sIGlzQW5kcm9pZCwgZGV2aWNlIH0gZnJvbSBcInBsYXRmb3JtXCI7XHJcblxyXG5cclxuaW1wb3J0ICogYXMgYXBwIGZyb20gXCJhcHBsaWNhdGlvblwiO1xyXG5pbXBvcnQgKiBhcyBmcyBmcm9tIFwiZmlsZS1zeXN0ZW1cIjtcclxuaW1wb3J0ICogYXMgYnVpbGRlciBmcm9tIFwidWkvYnVpbGRlclwiO1xyXG5cclxuaW1wb3J0IHsgUXVlc3Rpb25TbGlkZXNTZXJ2aWNlIH0gZnJvbSBcIi4vcXVlc3Rpb24tc2xpZGVzLnNlcnZpY2VcIjtcclxuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUgfSBmcm9tIFwiQGFuZ3VsYXIvcm91dGVyXCI7XHJcbmltcG9ydCB7IFN0YWNrTGF5b3V0IH0gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvdWkvbGF5b3V0cy9zdGFjay1sYXlvdXQvc3RhY2stbGF5b3V0XCI7XHJcbmltcG9ydCB7IFF1ZXN0aW9uIH0gZnJvbSBcIi4uLy4uL3NlcnZpY2VzL3F1ZXN0aW9uXCI7XHJcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gXCIuLi8uLi9wYXJhbWV0ZXJzL2NvbmZpZ1wiO1xyXG5cclxuXHJcbmltcG9ydCB7IFJhZGlvT3B0aW9uIH0gZnJvbSBcIi4uLy4uL3NlcnZpY2VzL3JhZGlvLW9wdGlvblwiO1xyXG5cclxuaW1wb3J0IHsgUHJvZ3Jlc3MgfSBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy91aS9wcm9ncmVzc1wiO1xyXG5pbXBvcnQgeyBnZXRTdHJpbmcgfSBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy9hcHBsaWNhdGlvbi1zZXR0aW5ncy9hcHBsaWNhdGlvbi1zZXR0aW5nc1wiO1xyXG5cclxuZGVjbGFyZSB2YXIgYW5kcm9pZDogYW55O1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogXCJxdWVzdGlvblwiLFxyXG4gICAgbW9kdWxlSWQ6IG1vZHVsZS5pZCxcclxuICAgIHRlbXBsYXRlVXJsOiBcIi4vcXVlc3Rpb24uY29tcG9uZW50Lmh0bWxcIixcclxuICAgIHN0eWxlVXJsczogW1wiLi9xdWVzdGlvbi5jb21wb25lbnQuY3NzXCJdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBRdWVzdGlvbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgICAvLy0tLS0tLS0tLS0tLS0tLy9cclxuICAgIGxpc3RlUXVlc3Rpb246IFF1ZXN0aW9uW107XHJcbiAgICBwYXRoSW1hZ2UgPSBDb25maWc7XHJcbiAgICB0aW1lUUNNO1xyXG4gICAgdGltZVNlY29uZDtcclxuICAgIHJhZGlvT3B0aW9ucyA9IFtdO1xyXG4gICAgc2hvd1NsaWRlUXVlc3Rpb24gPSBmYWxzZTtcclxuICAgIGlzRnJBciA9IENvbmZpZy5Jc0FyRnI7XHJcbiAgICBkaWN0aW9uYXlqc29uO1xyXG5cclxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLy9cclxuICAgIHB1YmxpYyBpZF90ZXN0O1xyXG4gICAgcHVibGljIGN1cnJlbnRTbGlkZU51bTogbnVtYmVyID0gMDtcclxuICAgIHByaXZhdGUgc2xpZGVDb3VudDogbnVtYmVyO1xyXG5cclxuICAgIHByaXZhdGUgc2NyZWVuV2lkdGg7XHJcbiAgICBwcml2YXRlIHNsaWRlc1ZpZXc6IEdyaWRMYXlvdXQ7XHJcblxyXG4gICAgQFZpZXdDaGlsZCgnc2xpZGVDb250ZW50Jykgc2xpZGVFbGVtZW50OiBFbGVtZW50UmVmO1xyXG4gICAgQFZpZXdDaGlsZCgnZ3JpZFZpZXdDJykgZ3JpZFZpZXdDOiBFbGVtZW50UmVmO1xyXG4gICAgQFZpZXdDaGlsZCgnZ3JpZE1haW4nKSBncmlkTWFpbjogRWxlbWVudFJlZjtcclxuICAgIHByaXZhdGUgc2xpZGVWaWV3OiBDb250ZW50VmlldztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIHBhZ2U6IFBhZ2UsXHJcbiAgICAgICAgcHJpdmF0ZSBuYXY6IFJvdXRlckV4dGVuc2lvbnMsXHJcbiAgICAgICAgcHJpdmF0ZSBhY3RpdmF0ZWRSb3V0ZTogQWN0aXZhdGVkUm91dGUsXHJcbiAgICAgICAgcHJpdmF0ZSBxdWVzdGlvblNlcnZpY2U6IFF1ZXN0aW9uU2xpZGVzU2VydmljZVxyXG4gICAgKSB7XHJcbiAgICAgICAgdGhpcy5zY3JlZW5XaWR0aCA9IHNjcmVlbi5tYWluU2NyZWVuLndpZHRoRElQcztcclxuXHJcbiAgICAgICAgLy8gU3BhbiB0aGUgYmFja2dyb3VuZCB1bmRlciBzdGF0dXMgYmFyIG9uIEFuZHJvaWRcclxuICAgICAgICBpZiAoaXNBbmRyb2lkICYmIGRldmljZS5zZGtWZXJzaW9uID49ICcyMScpIHtcclxuICAgICAgICAgICAgdmFyIFZpZXcgPSBhbmRyb2lkLnZpZXcuVmlldztcclxuICAgICAgICAgICAgdmFyIHdpbmRvdyA9IGFwcC5hbmRyb2lkLnN0YXJ0QWN0aXZpdHkuZ2V0V2luZG93KCk7XHJcbiAgICAgICAgICAgIHdpbmRvdy5zZXRTdGF0dXNCYXJDb2xvcigweDAwMDAwMCk7XHJcblxyXG4gICAgICAgICAgICB2YXIgZGVjb3JWaWV3ID0gd2luZG93LmdldERlY29yVmlldygpO1xyXG4gICAgICAgICAgICBkZWNvclZpZXcuc2V0U3lzdGVtVWlWaXNpYmlsaXR5KFxyXG4gICAgICAgICAgICAgICAgVmlldy5TWVNURU1fVUlfRkxBR19MQVlPVVRfU1RBQkxFXHJcbiAgICAgICAgICAgICAgICB8IFZpZXcuU1lTVEVNX1VJX0ZMQUdfTEFZT1VUX0hJREVfTkFWSUdBVElPTlxyXG4gICAgICAgICAgICAgICAgfCBWaWV3LlNZU1RFTV9VSV9GTEFHX0xBWU9VVF9GVUxMU0NSRUVOXHJcbiAgICAgICAgICAgICAgICB8IFZpZXcuU1lTVEVNX1VJX0ZMQUdfSU1NRVJTSVZFX1NUSUNLWSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIHRoaXMuZGljdGlvbmF5anNvbiA9IHJlcXVpcmUoQ29uZmlnLmRpY3Rpb25hcnlVcmwpO1xyXG4gICAgICAgIHRoaXMuaWRfdGVzdCA9IHRoaXMuYWN0aXZhdGVkUm91dGUuc25hcHNob3QucGFyYW1NYXAuZ2V0KCdpZF90ZXN0Jyk7XHJcbiAgICAgICAgdGhpcy50aW1lUUNNID0gZ2V0U3RyaW5nKFwidGVzdF9kdXJlZV9wcmVcIik7XHJcbiAgICAgICAgdGhpcy50aW1lU2Vjb25kPTYwO1xyXG4gICAgICAgIGxldCBncmlkTWFpbjogR3JpZExheW91dCA9IHRoaXMuZ3JpZE1haW4ubmF0aXZlRWxlbWVudCBhcyBHcmlkTGF5b3V0O1xyXG4gICAgICAgIGdyaWRNYWluLmhlaWdodCA9IDBcclxuICAgICAgICB0aGlzLnF1ZXN0aW9uU2VydmljZS5nZXRMaXN0UXVlc3Rpb25zKHRoaXMuaWRfdGVzdCkuc3Vic2NyaWJlKFxyXG4gICAgICAgICAgICBkYXRhID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVRdWVzdGlvbiA9IGRhdGE7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNsaWRlQ291bnQgPSB0aGlzLmxpc3RlUXVlc3Rpb24ubGVuZ3RoO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vLS0tLS0tLS0tUmFkaW9CdXR0b24tLS0tLS0tLS0tLS8vXHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3RlUXVlc3Rpb24uZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5nZXRUeXBlUXVlc3Rpb24oaXRlbSkudHlwZSA9PSAncicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yYWRpb09wdGlvbnNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5wdXNoKG5ldyBSYWRpb09wdGlvbihpdGVtLmlkLCBpdGVtLnJlcDEsIGZhbHNlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmFkaW9PcHRpb25zXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucHVzaChuZXcgUmFkaW9PcHRpb24oaXRlbS5pZCwgaXRlbS5yZXAyLCBmYWxzZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJhZGlvT3B0aW9uc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnB1c2gobmV3IFJhZGlvT3B0aW9uKGl0ZW0uaWQsIGl0ZW0ucmVwMywgZmFsc2UpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yYWRpb09wdGlvbnNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5wdXNoKG5ldyBSYWRpb09wdGlvbihpdGVtLmlkLCBpdGVtLnJlcDQsIGZhbHNlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmFkaW9PcHRpb25zXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucHVzaChuZXcgUmFkaW9PcHRpb24oaXRlbS5pZCwgaXRlbS5yZXA1LCBmYWxzZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJhZGlvT3B0aW9uc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnB1c2gobmV3IFJhZGlvT3B0aW9uKGl0ZW0uaWQsIGl0ZW0ucmVwNiwgZmFsc2UpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS8vXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNsaWRlVmlldyA9IHRoaXMuc2xpZGVFbGVtZW50Lm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBsZXQgZ3JpZFZpZXdDOiBHcmlkTGF5b3V0ID0gdGhpcy5ncmlkVmlld0MubmF0aXZlRWxlbWVudCBhcyBHcmlkTGF5b3V0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zbGlkZVZpZXcuY29udGVudCA9ICh0aGlzLnNsaWRlc1ZpZXcgPSBncmlkVmlld0MpO1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCB0aGlzLnNsaWRlQ291bnQ7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNsaWRlc1ZpZXcuZ2V0Q2hpbGRBdChpKS5vcGFjaXR5ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGlzdGVRdWVzdGlvbi5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaWkgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uU3dpcGUoMiwgMTApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGlpKyspXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0sIDUwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy5jdXJyZW50U2xpZGVOdW0pXHJcbiAgICAgICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXJyb3IgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJlcnJvciBxdWVzdGlvblwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vL1xyXG4gICAgICAgIHRoaXMucGFnZS5hY3Rpb25CYXJIaWRkZW4gPSB0cnVlO1xyXG4gICAgICAgIHRoaXMucGFnZS5jc3NDbGFzc2VzLmFkZChcIndlbGNvbWUtcGFnZS1iYWNrZ3JvdW5kXCIpO1xyXG4gICAgICAgIHRoaXMucGFnZS5iYWNrZ3JvdW5kU3BhblVuZGVyU3RhdHVzQmFyID0gdHJ1ZTtcclxuXHJcblxyXG4gICAgfVxyXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy9cclxuXHJcbiAgICBvblByb2dyZXNzQmFyTG9hZGVkKGFyZ3MpIHtcclxuICAgICAgICBsZXQgbXlQcm9ncmVzc0JhciA9IDxQcm9ncmVzcz5hcmdzLm9iamVjdDtcclxuXHJcbiAgICAgICAgbXlQcm9ncmVzc0Jhci52YWx1ZSA9IDEwO1xyXG4gICAgICAgIG15UHJvZ3Jlc3NCYXIubWF4VmFsdWUgPSAyMDA7XHJcblxyXG4gICAgICAgIHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgbXlQcm9ncmVzc0Jhci52YWx1ZSArPSA0O1xyXG4gICAgICAgIH0sIDEwMCk7XHJcbiAgICB9XHJcblxyXG4gICAgb25WYWx1ZUNoYW5nZWQoYXJncykge1xyXG4gICAgICAgIGxldCBteVByb2dyZXNzQmFyID0gPFByb2dyZXNzPmFyZ3Mub2JqZWN0O1xyXG5cclxuICAgICAgICBjb25zb2xlLmxvZyhcIk9sZCBWYWx1ZTogXCIgKyBhcmdzLm9sZFZhbHVlKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIk5ldyBWYWx1ZTogXCIgKyBhcmdzLnZhbHVlKTtcclxuICAgICAgICBpZiAoYXJncy52YWx1ZSA9PSAyMDApIHtcclxuICAgICAgICAgICAgdGhpcy5zaG93U2xpZGVRdWVzdGlvbiA9IHRydWU7XHJcbiAgICAgICAgICAgIGxldCBncmlkTWFpbjogR3JpZExheW91dCA9IHRoaXMuZ3JpZE1haW4ubmF0aXZlRWxlbWVudCBhcyBHcmlkTGF5b3V0O1xyXG4gICAgICAgICAgICBncmlkTWFpbi5oZWlnaHQgPSAxMDAwMDtcclxuICAgICAgICAgICAgLy8tLS0tLS0tLS0tLS10aW1lIGNpcmN1bGF0aW9uIC0tLS0tLS0tLy9cclxuICAgICAgICAgICAgdmFyIHRpbWVNID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50aW1lUUNNIC09IDE7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRpbWVTZWNvbmQgPTYwO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudGltZVFDTSA9PSAwKXtcclxuICAgICAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKHRpbWVNKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9LCA2MDAwMCk7XHJcblxyXG4gICAgICAgICAgICB2YXIgdGltZVMgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRpbWVTZWNvbmQgLT0gMTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnRpbWVRQ00gPT0gMClcclxuICAgICAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKHRpbWVTKTtcclxuICAgICAgICAgICAgfSwgMTAwMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8vXHJcbiAgICBvblN3aXBlKGRpcmVjdGlvbjogbnVtYmVyLCBkdXJlZTogbnVtYmVyKSB7XHJcblxyXG4gICAgICAgIGxldCBwcmV2U2xpZGVOdW0gPSB0aGlzLmN1cnJlbnRTbGlkZU51bTtcclxuICAgICAgICBsZXQgY291bnQgPSB0aGlzLnNsaWRlQ291bnQ7XHJcblxyXG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT0gMikge1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRTbGlkZU51bSA9ICh0aGlzLmN1cnJlbnRTbGlkZU51bSArIDEpICUgY291bnQ7XHJcbiAgICAgICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT0gMSkge1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRTbGlkZU51bSA9ICh0aGlzLmN1cnJlbnRTbGlkZU51bSAtIDEgKyBjb3VudCkgJSBjb3VudDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBXZSBhcmUgaW50ZXJlc3RlZCBpbiBsZWZ0IGFuZCByaWdodCBkaXJlY3Rpb25zXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGN1cnJTbGlkZSA9IHRoaXMuc2xpZGVzVmlldy5nZXRDaGlsZEF0KHByZXZTbGlkZU51bSk7XHJcbiAgICAgICAgY29uc3QgbmV4dFNsaWRlID0gdGhpcy5zbGlkZXNWaWV3LmdldENoaWxkQXQodGhpcy5jdXJyZW50U2xpZGVOdW0pO1xyXG5cclxuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmN1cnJlbnRTbGlkZU51bSk7XHJcbiAgICAgICAgdGhpcy5hbmltYXRlKGN1cnJTbGlkZSwgbmV4dFNsaWRlLCBkaXJlY3Rpb24sIGR1cmVlKTtcclxuICAgIH1cclxuXHJcbiAgICBhbmltYXRlKGN1cnJTbGlkZSwgbmV4dFNsaWRlLCBkaXJlY3Rpb24sIGR1cmVlKSB7XHJcbiAgICAgICAgbmV4dFNsaWRlLnRyYW5zbGF0ZVggPSAoZGlyZWN0aW9uID09IDIgPyB0aGlzLnNjcmVlbldpZHRoIDogLXRoaXMuc2NyZWVuV2lkdGgpO1xyXG4gICAgICAgIG5leHRTbGlkZS5vcGFjaXR5ID0gMTtcclxuICAgICAgICB2YXIgZGVmaW5pdGlvbnMgPSBuZXcgQXJyYXk8QW5pbWF0aW9uRGVmaW5pdGlvbj4oKTtcclxuICAgICAgICB2YXIgZGVmbjE6IEFuaW1hdGlvbkRlZmluaXRpb24gPSB7XHJcbiAgICAgICAgICAgIHRhcmdldDogY3VyclNsaWRlLFxyXG4gICAgICAgICAgICB0cmFuc2xhdGU6IHsgeDogKGRpcmVjdGlvbiA9PSAyID8gLXRoaXMuc2NyZWVuV2lkdGggOiB0aGlzLnNjcmVlbldpZHRoKSwgeTogMCB9LFxyXG4gICAgICAgICAgICBkdXJhdGlvbjogZHVyZWVcclxuICAgICAgICB9O1xyXG4gICAgICAgIGRlZmluaXRpb25zLnB1c2goZGVmbjEpO1xyXG5cclxuICAgICAgICB2YXIgZGVmbjI6IEFuaW1hdGlvbkRlZmluaXRpb24gPSB7XHJcbiAgICAgICAgICAgIHRhcmdldDogbmV4dFNsaWRlLFxyXG4gICAgICAgICAgICB0cmFuc2xhdGU6IHsgeDogMCwgeTogMCB9LFxyXG4gICAgICAgICAgICBkdXJhdGlvbjogZHVyZWVcclxuICAgICAgICB9O1xyXG4gICAgICAgIGRlZmluaXRpb25zLnB1c2goZGVmbjIpO1xyXG5cclxuICAgICAgICB2YXIgYW5pbWF0aW9uU2V0ID0gbmV3IEFuaW1hdGlvbihkZWZpbml0aW9ucyk7XHJcbiAgICAgICAgYW5pbWF0aW9uU2V0LnBsYXkoKVxyXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkFuaW1hdGlvbiBmaW5pc2hlZFwiKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmNhdGNoKChlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgZ2V0U2xpZGVySXRlbUNsYXNzKGl0ZW06IG51bWJlcikge1xyXG4gICAgICAgIGlmIChpdGVtID09IHRoaXMuY3VycmVudFNsaWRlTnVtKVxyXG4gICAgICAgICAgICByZXR1cm4gXCJjYXJvLWl0ZW0tZG90LXNlbGVjdGVkXCI7XHJcblxyXG4gICAgICAgIHJldHVybiBcImNhcm8taXRlbS1kb3RcIjtcclxuICAgIH1cclxuXHJcbiAgICBnZXRUeXBlUXVlc3Rpb24ocXVlc3QpIHtcclxuICAgICAgICBsZXQgbmJSID0gMDtcclxuICAgICAgICBsZXQgbmJKID0gMDtcclxuXHJcbiAgICAgICAgaWYgKHF1ZXN0LnJlcDEgIT0gbnVsbCkgbmJSICs9IDFcclxuICAgICAgICBpZiAocXVlc3QucmVwMiAhPSBudWxsKSBuYlIgKz0gMVxyXG4gICAgICAgIGlmIChxdWVzdC5yZXAzICE9IG51bGwpIG5iUiArPSAxXHJcbiAgICAgICAgaWYgKHF1ZXN0LnJlcDQgIT0gbnVsbCkgbmJSICs9IDFcclxuICAgICAgICBpZiAocXVlc3QucmVwNSAhPSBudWxsKSBuYlIgKz0gMVxyXG4gICAgICAgIGlmIChxdWVzdC5yZXA2ICE9IG51bGwpIG5iUiArPSAxXHJcblxyXG4gICAgICAgIGlmIChxdWVzdC5qdXN0MSAhPSBcIjBcIikgbmJKICs9IDFcclxuICAgICAgICBpZiAocXVlc3QuanVzdDIgIT0gXCIwXCIpIG5iSiArPSAxXHJcbiAgICAgICAgaWYgKHF1ZXN0Lmp1c3QzICE9IFwiMFwiKSBuYkogKz0gMVxyXG4gICAgICAgIGlmIChxdWVzdC5qdXN0NCAhPSBcIjBcIikgbmJKICs9IDFcclxuICAgICAgICBpZiAocXVlc3QuanVzdDUgIT0gXCIwXCIpIG5iSiArPSAxXHJcbiAgICAgICAgaWYgKHF1ZXN0Lmp1c3Q2ICE9IFwiMFwiKSBuYkogKz0gMVxyXG4gICAgICAgIGlmIChuYlIgPT0gMSAmJiBuYkogPT0gMSkgcmV0dXJuIHsgdHlwZTogXCJ0XCIsIG5Qcm86IG5iUiB9XHJcbiAgICAgICAgZWxzZSBpZiAobmJSID4gMSAmJiBuYkogPT0gMSkgcmV0dXJuIHsgdHlwZTogXCJyXCIsIG5Qcm86IG5iUiB9XHJcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogXCJjXCIsIG5Qcm86IG5iUiB9XHJcbiAgICB9XHJcbiAgICAvLy0tLS0tLVJhZGlvIEJ1dHRvbi0tLS0tLS0tL1xyXG4gICAgY2hhbmdlQ2hlY2tlZFJhZGlvKGlkUSwgdHh0Uikge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGlkUSArIFwiICBcIiArIHR4dFIpXHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yYWRpb09wdGlvbnMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnJhZGlvT3B0aW9uc1tpXS5pZFF1ZSA9PSBpZFEgJiYgdGhpcy5yYWRpb09wdGlvbnNbaV0udHh0UmVwID09IHR4dFIpXHJcbiAgICAgICAgICAgICAgICB0aGlzLnJhZGlvT3B0aW9uc1tpXS5zZWxlY3RlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMucmFkaW9PcHRpb25zW2ldLmlkUXVlID09IGlkUSAmJiB0aGlzLnJhZGlvT3B0aW9uc1tpXS50eHRSZXAgIT0gdHh0UilcclxuICAgICAgICAgICAgICAgIHRoaXMucmFkaW9PcHRpb25zW2ldLnNlbGVjdGVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMucmFkaW9PcHRpb25zKVxyXG4gICAgfVxyXG4gICAgZWxhdFJhZGlvKGlkUSwgdHh0Uik6IGJvb2xlYW4ge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yYWRpb09wdGlvbnMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnJhZGlvT3B0aW9uc1tpXS5pZFF1ZSA9PSBpZFEgJiYgdGhpcy5yYWRpb09wdGlvbnNbaV0udHh0UmVwID09IHR4dFIpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yYWRpb09wdGlvbnNbaV0uc2VsZWN0ZWQgfHwgZmFsc2U7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIG9uQ2hlY2tCb3hUYXAoKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJhYWFhYWFcIilcclxuICAgIH1cclxufSJdfQ==