"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var router_1 = require("nativescript-angular/router");
var page_1 = require("ui/page");
var animation_1 = require("ui/animation");
var platform_1 = require("platform");
var app = require("application");
var question_slides_service_1 = require("./question-slides.service");
var router_2 = require("@angular/router");
var config_1 = require("../../parameters/config");
var QuestionComponent = /** @class */ (function () {
    function QuestionComponent(page, nav, activatedRoute, questionService) {
        this.page = page;
        this.nav = nav;
        this.activatedRoute = activatedRoute;
        this.questionService = questionService;
        this.pathImage = config_1.Config;
        this.currentSlideNum = 0;
        this.slideCount = 3;
        this.screenWidth = platform_1.screen.mainScreen.widthDIPs;
        // Span the background under status bar on Android
        if (platform_1.isAndroid && platform_1.device.sdkVersion >= '21') {
            var View = android.view.View;
            var window = app.android.startActivity.getWindow();
            window.setStatusBarColor(0x000000);
            var decorView = window.getDecorView();
            decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE
                | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
                | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
                | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);
        }
    }
    QuestionComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.id_test = this.activatedRoute.snapshot.paramMap.get('id_test');
        this.questionService.getListQuestions(this.id_test).subscribe(function (data) {
            _this.listeQuestion = data;
            _this.slideCount = _this.listeQuestion.length;
            console.log("zaher mizyan question");
            console.log(_this.listeQuestion);
            _this.slideView = _this.slideElement.nativeElement;
            var gridViewC = _this.gridViewC.nativeElement;
            _this.slideView.content = (_this.slidesView = gridViewC);
            setTimeout(function () {
                for (var i = 1; i < _this.slideCount; i++)
                    _this.slidesView.getChildAt(i).opacity = 0;
            }, 50);
        }, function (error) {
            console.log("error question");
        });
        //---------------------------//
        this.page.actionBarHidden = true;
        this.page.cssClasses.add("welcome-page-background");
        this.page.backgroundSpanUnderStatusBar = true;
    };
    QuestionComponent.prototype.skipIntro = function () {
        // this.nav.navigate(["/home"], { clearHistory: true });
        // this.nav.navigate(["/home"]);
    };
    QuestionComponent.prototype.onSwipe = function (args) {
        var prevSlideNum = this.currentSlideNum;
        var count = this.slideCount;
        if (args.direction == 2) {
            this.currentSlideNum = (this.currentSlideNum + 1) % count;
        }
        else if (args.direction == 1) {
            this.currentSlideNum = (this.currentSlideNum - 1 + count) % count;
        }
        else {
            // We are interested in left and right directions
            return;
        }
        var currSlide = this.slidesView.getChildAt(prevSlideNum);
        var nextSlide = this.slidesView.getChildAt(this.currentSlideNum);
        this.animate(currSlide, nextSlide, args.direction);
    };
    QuestionComponent.prototype.animate = function (currSlide, nextSlide, direction) {
        nextSlide.translateX = (direction == 2 ? this.screenWidth : -this.screenWidth);
        nextSlide.opacity = 1;
        console.log(nextSlide);
        console.log(nextSlide.opacity);
        var definitions = new Array();
        var defn1 = {
            target: currSlide,
            translate: { x: (direction == 2 ? -this.screenWidth : this.screenWidth), y: 0 },
            duration: 500
        };
        definitions.push(defn1);
        var defn2 = {
            target: nextSlide,
            translate: { x: 0, y: 0 },
            duration: 500
        };
        definitions.push(defn2);
        var animationSet = new animation_1.Animation(definitions);
        animationSet.play()
            .then(function () {
            console.log("Animation finished");
        })
            .catch(function (e) {
            console.log(e.message);
        });
    };
    QuestionComponent.prototype.itemSelected = function (item) {
        console.log(item);
    };
    QuestionComponent.prototype.getSliderItemClass = function (item) {
        /*if (item == this.currentSlideNum)
            return "caro-item-dot caro-item-dot-selected";

        return "caro-item-dot";*/
    };
    QuestionComponent.prototype.getTypeQuestion = function (quest) {
        var nbR = 0;
        var nbJ = 0;
        if (quest.rep1 != null)
            nbR += 1;
        if (quest.rep2 != null)
            nbR += 1;
        if (quest.rep3 != null)
            nbR += 1;
        if (quest.rep4 != null)
            nbR += 1;
        if (quest.rep5 != null)
            nbR += 1;
        if (quest.rep6 != null)
            nbR += 1;
        if (quest.just1 != "0")
            nbJ += 1;
        if (quest.just2 != "0")
            nbJ += 1;
        if (quest.just3 != "0")
            nbJ += 1;
        if (quest.just4 != "0")
            nbJ += 1;
        if (quest.just5 != "0")
            nbJ += 1;
        if (quest.just6 != "0")
            nbJ += 1;
        if (nbR == 1 && nbJ == 1)
            return { type: "t", nPro: nbR };
        else if (nbR > 1 && nbJ == 1)
            return { type: "r", nPro: nbR };
        return { type: "c", nPro: nbR };
    };
    __decorate([
        core_1.ViewChild('slideContent'),
        __metadata("design:type", core_1.ElementRef)
    ], QuestionComponent.prototype, "slideElement", void 0);
    __decorate([
        core_1.ViewChild('gridViewC'),
        __metadata("design:type", core_1.ElementRef)
    ], QuestionComponent.prototype, "gridViewC", void 0);
    QuestionComponent = __decorate([
        core_1.Component({
            selector: "question",
            moduleId: module.id,
            templateUrl: "./question.component.html",
            styleUrls: ["./question.component.css"]
        }),
        __metadata("design:paramtypes", [page_1.Page,
            router_1.RouterExtensions,
            router_2.ActivatedRoute,
            question_slides_service_1.QuestionSlidesService])
    ], QuestionComponent);
    return QuestionComponent;
}());
exports.QuestionComponent = QuestionComponent;
//# sourceMappingURL=data:application/json;base64,