"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var router_1 = require("nativescript-angular/router");
var page_1 = require("ui/page");
var animation_1 = require("ui/animation");
var platform_1 = require("platform");
var app = require("application");
var question_slides_service_1 = require("./question-slides.service");
var router_2 = require("@angular/router");
var config_1 = require("../../parameters/config");
var radio_option_1 = require("../../services/radio-option");
var application_settings_1 = require("tns-core-modules/application-settings/application-settings");
var QuestionComponent = /** @class */ (function () {
    function QuestionComponent(page, nav, activatedRoute, questionService) {
        this.page = page;
        this.nav = nav;
        this.activatedRoute = activatedRoute;
        this.questionService = questionService;
        this.pathImage = config_1.Config;
        this.radioOptions = [];
        this.showSlideQuestion = false;
        this.currentSlideNum = 0;
        this.screenWidth = platform_1.screen.mainScreen.widthDIPs;
        // Span the background under status bar on Android
        if (platform_1.isAndroid && platform_1.device.sdkVersion >= '21') {
            var View = android.view.View;
            var window = app.android.startActivity.getWindow();
            window.setStatusBarColor(0x000000);
            var decorView = window.getDecorView();
            decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE
                | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
                | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
                | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);
        }
    }
    QuestionComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.creeenheight = platform_1.screen.mainScreen.heightDIPs;
        this.dictionayjson = require(config_1.Config.dictionaryUrl);
        this.id_test = this.activatedRoute.snapshot.paramMap.get('id_test');
        this.timeQCM = application_settings_1.getString("test_duree_pre");
        this.timeSecond = 60;
        var gridMain = this.gridMain.nativeElement;
        gridMain.height = 0;
        this.questionService.getListQuestions(this.id_test).subscribe(function (data) {
            _this.listeQuestion = data;
            _this.slideCount = _this.listeQuestion.length;
            _this.listeRepond = _this.listeQuestion;
            //---------RadioButton-----------//
            _this.listeQuestion.forEach(function (item) {
                if (_this.getTypeQuestion(item).type == 'r') {
                    _this.radioOptions
                        .push(new radio_option_1.RadioOption(item.id, item.rep1, false));
                    _this.radioOptions
                        .push(new radio_option_1.RadioOption(item.id, item.rep2, false));
                    _this.radioOptions
                        .push(new radio_option_1.RadioOption(item.id, item.rep3, false));
                    _this.radioOptions
                        .push(new radio_option_1.RadioOption(item.id, item.rep4, false));
                    _this.radioOptions
                        .push(new radio_option_1.RadioOption(item.id, item.rep5, false));
                    _this.radioOptions
                        .push(new radio_option_1.RadioOption(item.id, item.rep6, false));
                }
            });
            //------------------//
            console.log(_this.listeRepond);
            _this.slideView = _this.slideElement.nativeElement;
            var gridViewC = _this.gridViewC.nativeElement;
            _this.slideView.content = (_this.slidesView = gridViewC);
            //Opacity and swipe all
            setTimeout(function () {
                for (var i = 1; i < _this.slideCount; i++) {
                    _this.slidesView.getChildAt(i).opacity = 0;
                }
                _this.listeQuestion.forEach(function (item) {
                    var ii = 0;
                    _this.onSwipe(2, 10);
                    console.log(ii++);
                }, 50);
            });
        }, function (error) {
            console.log("error question");
        });
        //---------------------------//
        this.page.actionBarHidden = true;
        this.page.cssClasses.add("welcome-page-background");
        this.page.backgroundSpanUnderStatusBar = true;
    };
    //-------------------------------//
    QuestionComponent.prototype.onProgressBarLoaded = function (args) {
        var myProgressBar = args.object;
        myProgressBar.value = 10;
        myProgressBar.maxValue = 200;
        setInterval(function () {
            myProgressBar.value += 4;
        }, 100);
    };
    QuestionComponent.prototype.onValueChanged = function (args) {
        var _this = this;
        var myProgressBar = args.object;
        console.log("Old Value: " + args.oldValue);
        console.log("New Value: " + args.value);
        if (args.value == 200) {
            this.showSlideQuestion = true;
            var gridMain = this.gridMain.nativeElement;
            gridMain.height = this.creeenheight;
            //------------time circulation --------//
            var timeM = setInterval(function () {
                _this.timeQCM -= 1;
                _this.timeSecond = 60;
                if (_this.timeQCM == 0) {
                    clearInterval(timeM);
                }
            }, 60000);
            var timeS = setInterval(function () {
                _this.timeSecond -= 1;
                if (_this.timeQCM == 0)
                    clearInterval(timeS);
            }, 1000);
        }
    };
    //-------------------------------//
    QuestionComponent.prototype.onSwipe = function (direction, duree) {
        var prevSlideNum = this.currentSlideNum;
        var count = this.slideCount;
        if (direction == 2) {
            this.currentSlideNum = (this.currentSlideNum + 1) % count;
        }
        else if (direction == 1) {
            this.currentSlideNum = (this.currentSlideNum - 1 + count) % count;
        }
        else {
            // We are interested in left and right directions
            return;
        }
        var currSlide = this.slidesView.getChildAt(prevSlideNum);
        var nextSlide = this.slidesView.getChildAt(this.currentSlideNum);
        console.log(this.currentSlideNum);
        this.animate(currSlide, nextSlide, direction, duree);
    };
    QuestionComponent.prototype.animate = function (currSlide, nextSlide, direction, duree) {
        nextSlide.translateX = (direction == 2 ? this.screenWidth : -this.screenWidth);
        nextSlide.opacity = 1;
        var definitions = new Array();
        var defn1 = {
            target: currSlide,
            translate: { x: (direction == 2 ? -this.screenWidth : this.screenWidth), y: 0 },
            duration: duree
        };
        definitions.push(defn1);
        var defn2 = {
            target: nextSlide,
            translate: { x: 0, y: 0 },
            duration: duree
        };
        definitions.push(defn2);
        var animationSet = new animation_1.Animation(definitions);
        animationSet.play()
            .then(function () {
            console.log("Animation finished");
        })
            .catch(function (e) {
            console.log(e.message);
        });
    };
    QuestionComponent.prototype.getSliderItemClass = function (item) {
        if (item == this.currentSlideNum)
            return "caro-item-dot-selected";
        return "caro-item-dot";
    };
    QuestionComponent.prototype.getTypeQuestion = function (quest) {
        var nbR = 0;
        var nbJ = 0;
        if (quest.rep1 != null)
            nbR += 1;
        if (quest.rep2 != null)
            nbR += 1;
        if (quest.rep3 != null)
            nbR += 1;
        if (quest.rep4 != null)
            nbR += 1;
        if (quest.rep5 != null)
            nbR += 1;
        if (quest.rep6 != null)
            nbR += 1;
        if (quest.just1 != "0")
            nbJ += 1;
        if (quest.just2 != "0")
            nbJ += 1;
        if (quest.just3 != "0")
            nbJ += 1;
        if (quest.just4 != "0")
            nbJ += 1;
        if (quest.just5 != "0")
            nbJ += 1;
        if (quest.just6 != "0")
            nbJ += 1;
        if (nbR == 1 && nbJ == 1)
            return { type: "t", nPro: nbR };
        else if (nbR > 1 && nbJ == 1)
            return { type: "r", nPro: nbR };
        return { type: "c", nPro: nbR };
    };
    //------Radio Button--------/
    QuestionComponent.prototype.changeCheckedRadio = function (idQ, txtR) {
        console.log(idQ + "  " + txtR);
        for (var i = 0; i < this.radioOptions.length; i++)
            if (this.radioOptions[i].idQue == idQ && this.radioOptions[i].txtRep == txtR)
                this.radioOptions[i].selected = true;
            else if (this.radioOptions[i].idQue == idQ && this.radioOptions[i].txtRep != txtR)
                this.radioOptions[i].selected = false;
        console.log(this.radioOptions);
    };
    QuestionComponent.prototype.elatRadio = function (idQ, txtR) {
        for (var i = 0; i < this.radioOptions.length; i++)
            if (this.radioOptions[i].idQue == idQ && this.radioOptions[i].txtRep == txtR)
                return this.radioOptions[i].selected || false;
        return false;
    };
    QuestionComponent.prototype.onCheckBoxTap = function () {
        console.log("aaaaaa");
    };
    __decorate([
        core_1.ViewChild('slideContent'),
        __metadata("design:type", core_1.ElementRef)
    ], QuestionComponent.prototype, "slideElement", void 0);
    __decorate([
        core_1.ViewChild('gridViewC'),
        __metadata("design:type", core_1.ElementRef)
    ], QuestionComponent.prototype, "gridViewC", void 0);
    __decorate([
        core_1.ViewChild('gridMain'),
        __metadata("design:type", core_1.ElementRef)
    ], QuestionComponent.prototype, "gridMain", void 0);
    QuestionComponent = __decorate([
        core_1.Component({
            selector: "question",
            moduleId: module.id,
            templateUrl: "./question.component.html",
            styleUrls: ["./question.component.css"]
        }),
        __metadata("design:paramtypes", [page_1.Page,
            router_1.RouterExtensions,
            router_2.ActivatedRoute,
            question_slides_service_1.QuestionSlidesService])
    ], QuestionComponent);
    return QuestionComponent;
}());
exports.QuestionComponent = QuestionComponent;
//# sourceMappingURL=data:application/json;base64,